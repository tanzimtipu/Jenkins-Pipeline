pipeline {
    agent any 
    environment {
        DIRECTORY_PATH = 'C:/jenkins'
        STAGING_ENVIRONMENT = 'staging-env'
        PRODUCTION_ENVIRONMENT = 'prod-env'
    }
    stages {
        stage('Build') {
            steps {
                echo 'Building the code using Maven to compile and package it.'
                sh 'mvn clean install'
            }
            description: 'Build the code using Maven as the build automation tool.'
        }
        stage('Unit and Integration Tests') {
            steps {
                echo 'Running unit and integration tests using JUnit and TestNG.'
                sh 'mvn test'
            }
            description: 'Run unit tests with JUnit and integration tests with TestNG.'
        }
        stage('Code Analysis') {
            steps {
                echo 'Analyzing the code quality using SonarQube.'
                sh 'mvn sonar:sonar'
            }
            description: 'Integrate SonarQube for code analysis.'
        }
        stage('Security Scan') {
            steps {
                echo 'Performing security scan using OWASP Dependency-Check.'
                sh 'dependency-check.sh --project MyProject --scan ./'
            }
            description: 'Use OWASP Dependency-Check for security scanning.'
        }
        stage('Deploy to Staging') {
            steps {
                echo 'Deploying to staging server on AWS EC2 instance.'
                sh './deploy-to-staging.sh'
            }
            description: 'Deploy the application to a staging server on AWS EC2.'
        }
        stage('Integration Tests on Staging') {
            steps {
                echo 'Running integration tests on staging environment using Postman.'
                sh 'newman run my-collection.postman_collection.json'
            }
            description: 'Run integration tests on staging using Postman.'
        }
        stage('Deploy to Production') {
            steps {
                echo "Deploying to production server on AWS EC2 instance."
                sh './deploy-to-production.sh'
            }
            description: 'Deploy the application to a production server on AWS EC2.'
        }
    }
}
